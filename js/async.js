//1.callback
// function callback(){
//     console.log('Done');
// }
// console.log('before setTimeout');
// setTimeout(callback,1000);
// console.log('after settTimeout()');

//2.promise
//promise 意义在于将异步的主进程函数和回调函数内容分开，代码结构易读
//并且promise对象是链式结构，then和catch方法的结果仍是一个promise对象；
// function prom(resolve,reject){
//     const timeOut = Math.random()*2;
//     console.log(`set timeout to: ${timeOut} seconds`);
//     setTimeout(()=>{
//         if(timeOut<1){
//             console.log('call resolve');
//             resolve('done');
//         } else{
//             console.log('call reject');
//             reject('failed');
//         }
//     },timeOut*1000)
// }
// const p1 = new Promise(prom);
// const p2 = p1.then((result)=>{console.log(result)});
// const p3 = p2.catch((result)=>{console.log(result)});
//2.1 promise多任务异步





















































































































































































































































































































































































































































































































































































